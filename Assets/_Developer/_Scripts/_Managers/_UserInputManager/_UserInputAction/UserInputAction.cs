//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.12.0
//     from Assets/_Developer/_Scripts/_Managers/_UserInputManager/_UserInputAction/UserInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/_Developer/_Scripts/_Managers/_UserInputManager/_UserInputAction/UserInputAction.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @UserInputAction: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @UserInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputAction"",
    ""maps"": [
        {
            ""name"": ""Paddle"",
            ""id"": ""ff6cf1cd-a9ab-4d30-b101-f93cc723f54e"",
            ""actions"": [
                {
                    ""name"": ""DefaultControl"",
                    ""type"": ""Value"",
                    ""id"": ""0071a465-0196-4bca-bfcd-a8b63d47720c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TiltControl"",
                    ""type"": ""Value"",
                    ""id"": ""49f18b0a-475b-4982-a0cf-cf372216c774"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GameStart"",
                    ""type"": ""Button"",
                    ""id"": ""c7573fea-8dbc-451d-9405-3edd21871f9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchControl"",
                    ""type"": ""Value"",
                    ""id"": ""c7b1ff06-b28d-4179-813d-2e11c0c1687f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cf95e540-62f3-4a06-b1de-07a1c7b111e8"",
                    ""path"": ""<Accelerometer>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MobileAccelerometer"",
                    ""action"": ""TiltControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b542999c-652e-47bf-bfff-7f66a4dcfa75"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DefaultControl"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""deaa430e-353d-49f1-9cc2-5cefbbb0ae15"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyboardMouse"",
                    ""action"": ""DefaultControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""35823c74-30c7-4295-9c14-3766721832b0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyboardMouse"",
                    ""action"": ""DefaultControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e7e5b714-221b-49aa-bf82-702590f374cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyboardMouse"",
                    ""action"": ""DefaultControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""feb6bfe0-53a1-448a-aa0c-b5cb9150fdf7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyboardMouse"",
                    ""action"": ""DefaultControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1a7e5752-4a76-4103-bd2a-797fe13cdc08"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyboardMouse"",
                    ""action"": ""GameStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""574e2d42-530d-4ec9-8351-ef28d81d2058"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MobileTouchControl"",
                    ""action"": ""GameStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57777cb6-1e8e-4bf7-8aba-133b4dadf15c"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MobileTouchControl"",
                    ""action"": ""TouchControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MobileTouchControl"",
            ""bindingGroup"": ""MobileTouchControl"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MobileAccelerometer"",
            ""bindingGroup"": ""MobileAccelerometer"",
            ""devices"": [
                {
                    ""devicePath"": ""<Sensor>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Paddle
        m_Paddle = asset.FindActionMap("Paddle", throwIfNotFound: true);
        m_Paddle_DefaultControl = m_Paddle.FindAction("DefaultControl", throwIfNotFound: true);
        m_Paddle_TiltControl = m_Paddle.FindAction("TiltControl", throwIfNotFound: true);
        m_Paddle_GameStart = m_Paddle.FindAction("GameStart", throwIfNotFound: true);
        m_Paddle_TouchControl = m_Paddle.FindAction("TouchControl", throwIfNotFound: true);
    }

    ~@UserInputAction()
    {
        UnityEngine.Debug.Assert(!m_Paddle.enabled, "This will cause a leak and performance issues, UserInputAction.Paddle.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Paddle
    private readonly InputActionMap m_Paddle;
    private List<IPaddleActions> m_PaddleActionsCallbackInterfaces = new List<IPaddleActions>();
    private readonly InputAction m_Paddle_DefaultControl;
    private readonly InputAction m_Paddle_TiltControl;
    private readonly InputAction m_Paddle_GameStart;
    private readonly InputAction m_Paddle_TouchControl;
    /// <summary>
    /// Provides access to input actions defined in input action map "Paddle".
    /// </summary>
    public struct PaddleActions
    {
        private @UserInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PaddleActions(@UserInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Paddle/DefaultControl".
        /// </summary>
        public InputAction @DefaultControl => m_Wrapper.m_Paddle_DefaultControl;
        /// <summary>
        /// Provides access to the underlying input action "Paddle/TiltControl".
        /// </summary>
        public InputAction @TiltControl => m_Wrapper.m_Paddle_TiltControl;
        /// <summary>
        /// Provides access to the underlying input action "Paddle/GameStart".
        /// </summary>
        public InputAction @GameStart => m_Wrapper.m_Paddle_GameStart;
        /// <summary>
        /// Provides access to the underlying input action "Paddle/TouchControl".
        /// </summary>
        public InputAction @TouchControl => m_Wrapper.m_Paddle_TouchControl;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Paddle; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PaddleActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PaddleActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PaddleActions" />
        public void AddCallbacks(IPaddleActions instance)
        {
            if (instance == null || m_Wrapper.m_PaddleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PaddleActionsCallbackInterfaces.Add(instance);
            @DefaultControl.started += instance.OnDefaultControl;
            @DefaultControl.performed += instance.OnDefaultControl;
            @DefaultControl.canceled += instance.OnDefaultControl;
            @TiltControl.started += instance.OnTiltControl;
            @TiltControl.performed += instance.OnTiltControl;
            @TiltControl.canceled += instance.OnTiltControl;
            @GameStart.started += instance.OnGameStart;
            @GameStart.performed += instance.OnGameStart;
            @GameStart.canceled += instance.OnGameStart;
            @TouchControl.started += instance.OnTouchControl;
            @TouchControl.performed += instance.OnTouchControl;
            @TouchControl.canceled += instance.OnTouchControl;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PaddleActions" />
        private void UnregisterCallbacks(IPaddleActions instance)
        {
            @DefaultControl.started -= instance.OnDefaultControl;
            @DefaultControl.performed -= instance.OnDefaultControl;
            @DefaultControl.canceled -= instance.OnDefaultControl;
            @TiltControl.started -= instance.OnTiltControl;
            @TiltControl.performed -= instance.OnTiltControl;
            @TiltControl.canceled -= instance.OnTiltControl;
            @GameStart.started -= instance.OnGameStart;
            @GameStart.performed -= instance.OnGameStart;
            @GameStart.canceled -= instance.OnGameStart;
            @TouchControl.started -= instance.OnTouchControl;
            @TouchControl.performed -= instance.OnTouchControl;
            @TouchControl.canceled -= instance.OnTouchControl;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PaddleActions.UnregisterCallbacks(IPaddleActions)" />.
        /// </summary>
        /// <seealso cref="PaddleActions.UnregisterCallbacks(IPaddleActions)" />
        public void RemoveCallbacks(IPaddleActions instance)
        {
            if (m_Wrapper.m_PaddleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PaddleActions.AddCallbacks(IPaddleActions)" />
        /// <seealso cref="PaddleActions.RemoveCallbacks(IPaddleActions)" />
        /// <seealso cref="PaddleActions.UnregisterCallbacks(IPaddleActions)" />
        public void SetCallbacks(IPaddleActions instance)
        {
            foreach (var item in m_Wrapper.m_PaddleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PaddleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PaddleActions" /> instance referencing this action map.
    /// </summary>
    public PaddleActions @Paddle => new PaddleActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_MobileTouchControlSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme MobileTouchControlScheme
    {
        get
        {
            if (m_MobileTouchControlSchemeIndex == -1) m_MobileTouchControlSchemeIndex = asset.FindControlSchemeIndex("MobileTouchControl");
            return asset.controlSchemes[m_MobileTouchControlSchemeIndex];
        }
    }
    private int m_MobileAccelerometerSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme MobileAccelerometerScheme
    {
        get
        {
            if (m_MobileAccelerometerSchemeIndex == -1) m_MobileAccelerometerSchemeIndex = asset.FindControlSchemeIndex("MobileAccelerometer");
            return asset.controlSchemes[m_MobileAccelerometerSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Paddle" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PaddleActions.AddCallbacks(IPaddleActions)" />
    /// <seealso cref="PaddleActions.RemoveCallbacks(IPaddleActions)" />
    public interface IPaddleActions
    {
        /// <summary>
        /// Method invoked when associated input action "DefaultControl" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDefaultControl(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TiltControl" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTiltControl(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GameStart" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGameStart(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TouchControl" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTouchControl(InputAction.CallbackContext context);
    }
}
